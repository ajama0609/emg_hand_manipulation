file = readtable("emg_data_1.csv") 
time = file{:,1};           % First column = Time (ms) 
channels = file{:, 2:9};     % Columns 2-9 = Channel 1 to 8  
gesture_class = file{:, 10}; % Class labels (0 to 7) 

% Parameters
window_size = 200;    % in samples
step_size = 100;      % in samples
threshold = 5e-5;

% Storage
cleaned_windows = {};
cleaned_labels = [];

% Sliding window
num_samples = size(channels, 1);
for start_idx = 1:step_size:(num_samples - window_size + 1)
    end_idx = start_idx + window_size - 1;
    window = channels(start_idx:end_idx, :);
    
    % Check if all values in the window are below threshold
    if all(abs(window(:)) < threshold)
        continue; % skip this window
    end

    % Save window and its corresponding gesture class (majority or center)
    cleaned_windows{end+1} = window;

%for start_idx = 1:step_size:(length(time) - window_size + 1)
 %   end_idx = start_idx + window_size - 1;
  %  window_data = channels(start_idx:end_idx, :);
   % window_time = time(start_idx:end_idx);
    
    % Process window_data here
%end

% Define the first window indices
start_idx = 1;
end_idx = window_size;

% Extract data for the first window
window_time = time(start_idx:end_idx);
window_data = channels(start_idx:end_idx, :);  

[b, a] = butter(4, 20/(Fs/2), 'high');
filtered_data = filtfilt(b, a, window_data); 

% Assuming time is in ms, convert to seconds and calculate Fs
dt = mean(diff(window_time)) / 1000;  % average time difference in seconds
Fs = 1 / dt; 

%disp(['Estimated sampling rate (Fs): ', num2str(Fs), ' Hz']);

freq = Fs/2 * linspace(0,1,5000+1);  % frequency vector up to Nyquist freq 

%for ch = 1:size(window_data, 2)
 %   Y = fft(window_data(:, ch),10000);
  %  P2 = abs(Y / window_size);        % Two-sided spectrum
   % P1 = P2(1:5000+1);             % Single-sided spectrum
    %P1(2:end-1) = 2*P1(2:end-1);    % Multiply by 2 (except DC and Nyquist)
    
    %plot(freq, P1);
%end

figure;
plot(window_time, filtered_data);
xlabel('Time (ms)');
ylabel('Amplitude (filtered)');
title('Filtered EMG Signals (Time Domain)');
legend('Channel 1','Channel 2','Channel 3','Channel 4', ...
       'Channel 5','Channel 6','Channel 7','Channel 8');
grid on;